# 백터 데이터의 타입 생성
a = c (1,2,3,4,5)
b <- 1:5
b
c(1,2) -> c
#행렬
d = array(1:20, dim=c(4,5))
d
e = matrix(1:10, nrow=2)
e
#리스트 (python에서 dict 형태와 흡사)
f = list(name = "test", age = 20, phone="01012345678")
f
a = c(1, '2')
a = c(1, 'moon')
a
f["name"]
#데이터프레임
df = data.frame(name=c("test", "test2"),
age = c(30, 20),
phone = c('01012345678', '01098765432'))
df
#if문
a = 10
if (a > 5){
print('a는 5보다 크다')
}
if (a > 15){
print("a는 15보다 크다")
}else {
print("a는 15보다 작거나 같다. ")
}
if (a > 15){
print("a는 15보다 크다")
}else if (a >= 10){
print("a는 10보다 크거나 같거나 15보다 작거나 같다. ")
}else {
print("a는 10보다 작다")
}
# 백터 데이터의 타입 생성
a = c (1,2,3,4,5)
a
b <- 1:5
b
#which문 ( python 에서는 index() )
name = c("test", "test2", "test3")
which(name == 'test2')
which(name == "test5")
which(name != "test2")
# 함수 (function 키워드로 함수를 선언)
# 매개변수가 없는 경우
func_1 = function(){
return "Hello R"
}
# 함수 (function 키워드로 함수를 선언)
# 매개변수가 없는 경우
func_1 = function(){
return("Hello R")
}
func_1
func_1()
# 매개변수가 있는 경우
func_2 = function(x, y){
result = x ^ y
return(result)
}
func_2(5, 2)
'%s%' = function(x, y){
result = x ^ y
return(result)
}
5%s%2
#매개변수의 기본값 설정
func_4 = function(x, y=5){
result = x ^ y
return(result)
}
func_4(2)     #32
func_4(2, 10) ##1024
## 매개변수의 개수가 가변인 경우
## python def func(x, *y)
func_5 = function(x, ...){
print(x)
print(...)
}
func_5(1,2,3,4,5,6)
## 매개변수의 개수가 가변인 경우
## python def func(x, *y)
func_5 = function(x, ...){
print(x)
print(sum(...))
}
func_5(1,2,3,4,5,6)
## 매개변수의 개수가 가변인 경우
## python def func(x, *y)
func_5 = function(x, ...){
print(x)
print(c(...))
}
func_5(1,2,3,4,5,6)
func_5(1,2,3)
##백터형 데이터를 가지고 데이터프레임 생성
##백터데이터의 길이가 동일 해야 가능
name = c("test", "test2", "test3", "test4")
grade = c(1,3,2,1)
student = data.frame(name, grade)
student
midturm = c(70, 80, 60, 90)
final = c(60, 90, 80, 90)
scores = cbind(midturm, final)
scores
student
scores
students = data.frame(student, scores)
students
gender = c("M", "F", "F", "M")
students = cbind(students, gender)
students
## 중간 성적과 기말 성적의 합을 새로운 컬럼을 추가
## 새로운 컬럼의 이름은 total_score
## case1
total_score = midturm + final
total_score
cbind(students, total_score)
## 특정 컬럼의 데이터를 추출
students["midturm"]
## 특정 컬럼의 데이터를 추출
students[["midturm"]]
students$midturm
stndents[[3]]
students[[3]]
# case2
total_score_2 = students$midturm + students[['final']]
cbind(students, total_score_2)
new_student = data.frame(
{
name = "test5",
grade = 3,
midturm = 80,
final = 60,
gender = 'F'
}
)
new_student = data.frame(
name = "test5",
grade = 3,
midturm = 80,
final = 60,
gender = 'F'
)
new_student
rbind(students, new_student)
rbind(students, new_student) -> students
## 데이터프레임의 필터링
## 데이터프레임명[행의 기준, 열의 기준]
students[1, ]
students[c(2,4), ]
students[1:3, ]
## 해당 인덱스만 제외하고 출력
students[-1, ]
## 조건을 이용해서 필터링
## 학년이 2학년 이상인 경우
students$grade >= 2
students[students$grade >=2, ]
## 정렬 - 기본값 오름차순
order(students$grade)
students
students[order(students$grade), ]
## 내림차순
order(students$grade, descending = TRUE)
## 내림차순
order(students$grade, decreasing = TRUE)
order(-students$grade)
## csv 파일 로드
## csv 폴더 이동 -> csv 파일
df = read.csv("./csv/csv_exam.csv")
df
head(df)
head(df, 2)
tail(df)
tail(df, 2)
## 뷰어창에 데이터프레임을 출력
view(df)
View(df)
# 데이터프레임의 크기를 출력
dim(df)
# 데이터프레임의 속성 값 출력
str(df)
# 통계 요약 정보 출력
summary(df)
summary(df['math'])
## dplyr 패키지 설치
install.packages("dplyr")
## dplyr 패키지 로드
library(dplyr)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
head(df, 1)
## class 컬럼의 이름을 grade 변경
rename(df, grade = class)
## dplyr 패키지 로드
library(dplyr)
## class 컬럼의 이름을 grade 변경
rename(df, grade = class)
head(df, 1)
## class 컬럼의 이름을 grade 변경
rename(df, grade = class)
head(df, 1)
## 새로운 파생변수 전체 점수의 합계
df$total = df$math + df$english + df$science
head(df, 1)
## mean이라는 컬럼을 생성하여 점수의 평균 삽입
df$total /3
## mean이라는 컬럼을 생성하여 점수의 평균 삽입
df%mean = df$total /3
## mean이라는 컬럼을 생성하여 점수의 평균 삽입
df$mean = df$total /3
head(df, 1)
df$mean
## 성적의 평균 점수가 60점 이상이면 pass , 아니면 fail
## res 컬럼을 생성
## ifelse(조건식, 참일때 값, 거짓일때 값)
ifelse(df$mean >= 60, "pass", "fail")
## 성적의 평균 점수가 60점 이상이면 pass , 아니면 fail
## res 컬럼을 생성
## ifelse(조건식, 참일때 값, 거짓일때 값)
ifelse(df$mean >= 60, "pass", "fail") -> df$res
head(df, 1)
df = read.csv("./csv/csv_exam.csv")
## filter()
df %>% filter(class == 1)
## arrnage() - 정렬
df %>% arrange(math)
## 내림차순 정렬
df %>%  arrange(desc(math))
df %>%  arrnage(-math)
df %>%  arrange(-math)
## 정렬 기준을 여러개
df %>%  arrange(class, math)
## class를 기준으로 오름차순, 영어성적으로 기준 내림차순
df %>% arrange(class, -english)
# 특정 컬럼만 출력
df %>% select(class)
df %>% select(class, math, english)
# 특정 컬럼만 지우고 출력
df %>% select(-class)
# 컬럼의 범위를 지정
df %>% select(math:science)
# 클래스를 기준으로 그룹화 수학과 영어의 평균 점수
df %>%
group_by(class) %>%
summarise(mean_math = mean(math),
mean_english = mean(english))
## 컬럼 생성
df %>% mutate(total = math + english + science,
mean = (math + english + science) / 3)
## class를 기준으로 오름차순 정렬
## class부터 english까지의 데이터를 출력
df %>% arrange(class) %>% select(class:english)
## 내장함수로 표현
## 정렬
order(df$class)
df[order(df$class)]
df[order(df$class), ]
df[order(df$class), ["class":"english"]]
df[order(df$class), ]
df[order(df$class), ][["class"]]
df[order(df$class), ]["class":"english"]
df[order(df$class), ][["class":"english"]]
df[order(df$class), ]["class","english"]
df[order(df$class), ][c("class","english")]
df[order(df$class), ][c("class","math","english")]
## join 함수
df_1 = data.frame(id = 1:5,
score = c(80,70,80,90,85))
df_2 = data.frame(id = 1:5,
weight = c(80,70,75,65,60))
df_3 = data.frame(id = 1:3,
class = c(1,1,2))
inner_join(df_1, df_2, by='id')
inner_join(df_1, df_3, by='id')
left_join(df_1, df_3, by='id')
right_join(df_1, df_3, by='id')
bind_rows(df_1, df_2)
rbind(df_1, df_2)
